@using MetaMetrics.Api
@using Syncfusion.Blazor;
@using Syncfusion.Blazor.Charts;
<table style="border: 0px; padding: 0px; margin: 0px; width: 100%">
    <tr style="border: 0px; padding: 0px; margin: 0px;">
        <td colspan="3" style="border: 0px; padding: 0px 4px 0px 4px; margin: 0px; text-align: center;"><span style="font-size: 10px;">@Title</span></td>
    </tr>
    <tr style="border: 0px; padding: 0px; margin: 0px;">
        <td colspan="3" style="border: 0px; padding: 0px 4px 0px 4px; margin: 0px; text-align: center;">
            <SfSparkline Fill="lightblue" DataSource="DisplayValues" XName="Title" Height="50px" Width="100%" YName="Value" TValue="MetaMetrics.Api.IMetaMetricsTimeValue" Type="SparklineType.Area" ValueType="SparklineValueType.Category">
                <SparklineDataLabelSettings Format="${Value}" Visible="new List<VisibleType> { VisibleType.Start, VisibleType.High, VisibleType.End }"  Fill="lightgray" EdgeLabelMode="EdgeLabelMode.Shift" Opacity="0.5">
                    <SparklineFont Color="darkblue" FontStyle="italic" FontWeight="regular" Size="9" Opacity="0.8">
                    </SparklineFont>
                    <SparklineDataLabelBorder Color="lightblue" Width="0">
                    </SparklineDataLabelBorder>
                </SparklineDataLabelSettings>
                <SparklineContainerArea>
                    <SparklineContainerAreaBorder Color="#ccccff" Width="0"></SparklineContainerAreaBorder>
                </SparklineContainerArea>
                <SparklineBorder Color="darkblue" Width="1"></SparklineBorder>
                <SparklinePadding Left="0" Right="0" Top="22" Bottom="0"></SparklinePadding>
                <SparklineTooltipSettings TValue="MetaMetrics.Api.IMetaMetricsTimeValue" Visible="true" Format="${Title}" Fill="lightgray">
                    <SparklineTooltipTextStyle Color="darkblue" Size="9" FontStyle="italic"></SparklineTooltipTextStyle>
                    <SparklineTooltipBorder Color="lightblue" Width="0" ></SparklineTooltipBorder>
                </SparklineTooltipSettings>
                <SparklineAxisSettings MinY="-1" ></SparklineAxisSettings>
            </SfSparkline>
        </td>
    </tr>
    <tr style="border: 0px; padding: 0px; margin: 0px; line-height: 11px">
        <td style="border: 0px; padding: 0px 4px 0px 2px; margin: 0px; text-align: left"><span style="font-size: 9px; font-style: italic">@(Average>0?$"{Average.ToString("N1")}":"")</span></td>
        <td style="border: 0px; padding: 0px 2px 0px 2px; margin: 0px; text-align: center"><span style="font-size: 9px; font-style: italic">@(Maximum>0?$"{Maximum.ToString("N0")}":"")</span></td>
        <td style="border: 0px; padding: 0px 2px 0px 4px; margin: 0px; text-align: right"><span style="font-size: 9px; font-style: italic">@(Sum>0?$"{Sum.ToString("N0")}":"")</span></td>
    </tr>
</table>

@code {
    
    private MetaMetricsInstallationTimeLine _installation;
    private MetaMetricsMeasurementType _measurementType;
    private MetaMetricsMeasurementGroup _measurement;
    private MetaMetricsItemTimeValues _measurementItem;
    private List<IMetaMetricsTimeValue> _timeValues;
    private List<IMetaMetricsTimeValue> _displayValues;
    private int _hoursInterval;
    private string _title = "";

    [Parameter]
    public string Title
    {
        set
        {
            if (_title == value)
                return;
            _title = value;
        }
        get => _title;
    }

    [Parameter]
    public MetaMetricsInstallationTimeLine Installation
    {
        set
        {
            if (ReferenceEquals(_installation, value))
                return;
            _installation = value;
            BuildValues();
        }
        get => _installation;
    }

    [Parameter]
    public MetaMetricsMeasurementType MeasurementType
    {
        set
        {
            if (_measurementType == value)
                return;
            _measurementType = value; 
            BuildValues();
        }
        get => _measurementType;
    }

    [Parameter]
    public MetaMetricsMeasurementGroup Measurement
    {
        set
        { 
            if (ReferenceEquals(_measurement, value))
                return;
            _measurement = value;
            BuildValues();
        }
        get => _measurement;
    }

    [Parameter]
    public MetaMetricsItemTimeValues MeasurementItem
    {
        set
        { 
            if (ReferenceEquals(_measurementItem, value))
                return;
            _measurementItem = value;
            BuildValues();
        }
        get => _measurementItem;
    }


    
    public void BuildValues()
    {
        if (Installation != null && MeasurementType != MetaMetricsMeasurementType.Unknown)
        {
            var measurement = Installation[MeasurementType];
            if (measurement == null)
            {
                TimeValues = null;
            }
            else
            {
                StartTime = measurement.Query.RequestStartTime;
                EndTime = measurement.Query.RealEndTime;
                TimeValues = measurement.TimeValues.Cast<IMetaMetricsTimeValue>().ToList();
            }
        }
        else if (Measurement != null)
        {
            StartTime = Measurement.Query.RequestStartTime;
            EndTime = Measurement.Query.RealEndTime;
            TimeValues = Measurement.TimeValues.Cast<IMetaMetricsTimeValue>().ToList();
        }
        else if (MeasurementItem != null)
        {
            TimeValues = MeasurementItem.ItemTimeValues.Cast<IMetaMetricsTimeValue>().ToList();
        }
        else
        {
            TimeValues = null;
        }
    }
    
    [Parameter]
    public int HoursInterval
    {
        set
        {
            if (_hoursInterval == value)
                return;
            _hoursInterval = value;
            BuildDisplayValues();
        }
        get => _hoursInterval;
    }

    [Parameter]
    public List<IMetaMetricsTimeValue> TimeValues
    {
        set
        { 
            if (ReferenceEquals(_timeValues, value))
                return;
            _timeValues = value;
            BuildDisplayValues();
        }
        get => _timeValues;
    }

    public void BuildDisplayValues()
    {
        if (TimeValues != null && StartTime != DateTime.MinValue && EndTime>=StartTime)
        {
            var interval = HoursInterval;
            if (interval <= 0)
                interval = 24;
            
            var items = new Dictionary<string,IMetaMetricsTimeValue>();
            
            var time = StartTime.Group(interval);
            while (time<EndTime)
            {
                var till = time.AddHours(interval).AddMinutes(-1);
                if (till > EndTime)
                    till = EndTime;
                items.Add(time.ToString("yyyyMMddHHmm"),new MetaMetricsItemTimeValue(){From = time, Till = till, Value = 0});
                time = time.AddHours(interval);
            }
            if (TimeValues.Any())
            {
                foreach (var item in TimeValues)
                {
                    var t = item.From.Group(interval);
                    var it = items[t.ToString("yyyyMMddHHmm")];
                    it.Value+=item.Value;
                    it.Exists = true;
                }
                FirstTime = TimeValues.Max(s=>s.From);
                LastTime = TimeValues.Max(s=>s.Till);            
                Average = items.Values.Where(n=>n.Exists).Average(n=>n.Value);
                Maximum = items.Values.Where(n=>n.Exists).Max(n=>n.Value);
            }
            else
            {
                FirstTime = DateTime.MinValue;
                LastTime = DateTime.MinValue;            
                Average = 0;       
                Maximum = 0;
            }
            Sum = items.Values.Sum(n=>n.Value);
            Count = items.Values.GroupBy(n=>n.From).Count();
            Days = items.Values.GroupBy(n=>n.From.Date).Count();
     
            DisplayValues = items.Values.ToList();
            
        }
        else
        {
            FirstTime = DateTime.MinValue;
            LastTime = DateTime.MinValue;            
            Average = 0;
            Maximum = 0;
            Sum = 0;
            Count = 0;
            Days = 0;
            DisplayValues = null;
        }
    }
    
    [Parameter]
    public List<IMetaMetricsTimeValue> DisplayValues
    {
        set
        { 
            if (ReferenceEquals(_displayValues, value))
                return;
            _displayValues = value;
            if (_displayValues != null)
                ContentValues = string.Join(" ", _displayValues.Select(n => n.Value));
            else
                ContentValues = null;
        }
        get => _displayValues;
    }
    
    public string ContentValues{ set; get; }

    [Parameter]
    public DateTime StartTime { set; get; }
    
    [Parameter]
    public DateTime EndTime { set; get; }
    
    public DateTime FirstTime { set; get; }
    public DateTime LastTime { set; get; }

    public double Average { set; get; }
    public long Maximum { set; get; }
    public long Sum { set; get; }
    public int Count { set; get; }
    public int Days { set; get; }
}